import { telegramBot } from '../bot.js'
import { yandexSpeech } from '../../api/yandexSpeech.api.js'
import { Markup } from 'telegraf'
import * as dotenv from 'dotenv'

dotenv.config({ path: `.env${process.env.NODE_ENV}` })

class SettingsKeyboard {
	bottomNavigation = [Markup.button.callback('üõ† –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫'), Markup.button.callback('üëàüèΩ –ù–∞–∑–∞–¥', '–ù–∞–∑–∞–¥')] // ‚óÑ üîô

	// Main menu keyboard
	mainMenu() {
		return Markup.inlineKeyboard([
			[Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–∞')],
			[Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT')],
		])
	}

	// Response menu keyboard
	responseSettings() {
		const topLine = []
		const middleLine = []
		const bottomLine = []
		const responseMode = telegramBot.userSettings.get('responseMode')
		const responseVoiceApi = telegramBot.userSettings.get('responseVoiceApi')
		const userSettings = telegramBot.userSettings
		let hideSynthSetting = true
		let hideSynth = true
		if (responseMode === 'any' || responseMode === 'voice') hideSynth = false
		if (!hideSynth && responseVoiceApi === 'yandex' || !hideSynth && responseVoiceApi === 'any') hideSynthSetting = false

		if (userSettings.get('responseMode') === 'text') topLine.push(Markup.button.callback('–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: –¢–µ–∫—Å—Ç', '–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞')) // ‚úì
		if (userSettings.get('responseMode') === 'voice') topLine.push(Markup.button.callback('–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: –ì–æ–ª–æ—Å–æ–º', '–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞')) // ‚úì
		if (userSettings.get('responseMode') === 'any') topLine.push(Markup.button.callback('–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: –¢–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º', '–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞')) // ‚úì

		if (userSettings.get('responseVoiceApi') === 'yandex') middleLine.push(Markup.button.callback('–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä: Yandex', '–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', hideSynth)) // ‚úì
		if (userSettings.get('responseVoiceApi') === 'google') middleLine.push(Markup.button.callback('–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä: Google', '–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', hideSynth)) // ‚úì
		if (userSettings.get('responseVoiceApi') === 'any') middleLine.push(Markup.button.callback('–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä: –í—Å–µ', '–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', hideSynth)) // ‚úì

		bottomLine.push(Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞ Yandex...', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞', hideSynthSetting))
		return Markup.inlineKeyboard([topLine, middleLine, bottomLine, this.bottomNavigation])
	}

	// Response mode menu keyboard
	responseSettingsMode() {
		const topLine = []
		const bottomLine = []
		const userSettings = telegramBot.userSettings
		if (userSettings.get('responseMode') === 'text') {
			topLine.push(Markup.button.callback('‚úì –¢–µ–∫—Å—Ç–æ–º', '–¢–µ–∫—Å—Ç–æ–º'))
		} else {
			topLine.push(Markup.button.callback('–¢–µ–∫—Å—Ç–æ–º', '–¢–µ–∫—Å—Ç–æ–º'))
		}
		if (userSettings.get('responseMode') === 'voice') {
			topLine.push(Markup.button.callback('‚úì –ì–æ–ª–æ—Å–æ–º', '–ì–æ–ª–æ—Å–æ–º'))
		} else {
			topLine.push(Markup.button.callback('–ì–æ–ª–æ—Å–æ–º', '–ì–æ–ª–æ—Å–æ–º'))
		}
		if (userSettings.get('responseMode') === 'any') {
			bottomLine.push(Markup.button.callback('‚úì –¢–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º', '–¢–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º'))
		} else {
			bottomLine.push(Markup.button.callback('–¢–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º', '–¢–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º'))
		}
		return Markup.inlineKeyboard([topLine, bottomLine, this.bottomNavigation])
	}

	// Response voice synthesizer api keyboard
	responseSettingsApi() {
		const yandexButton = []
		const googleButton = []
		const anyButton = []
		const userSettings = telegramBot.userSettings
		if (process.env.TEXT_TO_SPEECH_MODE === 'yandex') {
			if (userSettings.get('responseVoiceApi') === 'yandex') {
				yandexButton.push(Markup.button.callback('‚úì Yandex', 'Yandex'))
			} else {
				yandexButton.push(Markup.button.callback('Yandex', 'Yandex'))
			}
		}
		if (process.env.TEXT_TO_SPEECH_MODE === 'google') {
			if (userSettings.get('responseVoiceApi') === 'google') {
				googleButton.push(Markup.button.callback('‚úì Google', 'Google'))
			} else {
				googleButton.push(Markup.button.callback('Google', 'Google'))
			}
		}
		if (process.env.TEXT_TO_SPEECH_MODE === 'any') {
			if (userSettings.get('responseVoiceApi') === 'yandex') {
				yandexButton.push(Markup.button.callback('‚úì Yandex', 'Yandex'))
			} else {
				yandexButton.push(Markup.button.callback('Yandex', 'Yandex'))
			}
			if (userSettings.get('responseVoiceApi') === 'google') {
				googleButton.push(Markup.button.callback('‚úì Google', 'Google'))
			} else {
				googleButton.push(Markup.button.callback('Google', 'Google'))
			}
			if (userSettings.get('responseVoiceApi') === 'any') {
				anyButton.push(Markup.button.callback('‚úì –í—Å–µ', '–í—Å–µ —Å–∏–Ω—Ç—ã'))
			} else {
				anyButton.push(Markup.button.callback('–í—Å–µ', '–í—Å–µ —Å–∏–Ω—Ç—ã'))
			}
		}
		return Markup.inlineKeyboard([yandexButton, googleButton, anyButton, this.bottomNavigation])
	}

	voiceSettingsYandex() {
		const topLine = []
		const middleLine = []
		const bottomLine = []
		const userSettings = telegramBot.userSettings
		if (userSettings.get('responseVoiceLanguage') === 'ru') topLine.push(Markup.button.callback('–Ø–∑—ã–∫: üá∑üá∫ –†—É—Å—Å–∫–∏–π', '–Ø–∑—ã–∫'))
		if (userSettings.get('responseVoiceLanguage') === 'en') topLine.push(Markup.button.callback('–Ø–∑—ã–∫: üá¨üáß English', '–Ø–∑—ã–∫'))
		if (userSettings.get('responseVoiceLanguage') === 'de') topLine.push(Markup.button.callback('–Ø–∑—ã–∫: üá©üá™ Deutsch', '–Ø–∑—ã–∫'))
		if (userSettings.get('responseVoiceLanguage') === 'kk') topLine.push(Markup.button.callback('–Ø–∑—ã–∫: üá∞üáø “ö–∞–∑–∞“õ—à–∞', '–Ø–∑—ã–∫'))
		if (userSettings.get('responseVoiceLanguage') === 'uz') topLine.push(Markup.button.callback('–Ø–∑—ã–∫: üá∫üáø –é–∑–±–µ–∫', '–Ø–∑—ã–∫'))

		if (userSettings.get('responseVoiceGender') === 'male') middleLine.push(Markup.button.callback('–ü–æ–ª: –ú—É–∂—Å–∫–æ–π', '–ü–æ–ª'))
		if (userSettings.get('responseVoiceGender') === 'female') middleLine.push(Markup.button.callback('–ü–æ–ª: –ñ–µ–Ω—Å–∫–∏–π', '–ü–æ–ª'))

		if (userSettings.get('responseVoice') === 'filipp') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –§–∏–ª–∏–ø–ø', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'ermil') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –≠—Ä–º–∏–ª', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'madirus') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ú–∞–¥–∏—Ä—É—Å', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'zahar') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ó–∞—Ö–∞—Ä', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'alena') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ê–ª—ë–Ω–∞', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'jane') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –î–∂–µ–π–Ω', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'omazh') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –û–º–∞–∂', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'lea') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –õ–µ–∞', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'john') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –î–∂–æ–Ω', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'madi') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ú–∞–¥–∏', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'amira') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ê–º–∏—Ä–∞', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))
		if (userSettings.get('responseVoice') === 'nigora') middleLine.push(Markup.button.callback('–ü–µ—Ä—Å–æ–Ω–∞–∂: –ù–∏–≥–æ—Ä–∞', '–ü–µ—Ä—Å–æ–Ω–∞–∂'))

		if (userSettings.get('responseVoiceEmotion') === 'good') {
			if (userSettings.get('responseVoiceGender') === 'male') {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –†–∞–¥–æ—Å—Ç–Ω—ã–π', '–ê–º–ø–ª—É–∞'))
			} else {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –†–∞–¥–æ—Å—Ç–Ω–∞—è', '–ê–º–ø–ª—É–∞'))
			}
		}
		if (userSettings.get('responseVoiceEmotion') === 'neutral') {
			if (userSettings.get('responseVoiceGender') === 'male') {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', '–ê–º–ø–ª—É–∞'))
			} else {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', '–ê–º–ø–ª—É–∞'))
			}
		}
		if (userSettings.get('responseVoiceEmotion') === 'evil') {
			if (userSettings.get('responseVoiceGender') === 'male') {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π', '–ê–º–ø–ª—É–∞'))
			} else {
				bottomLine.push(Markup.button.callback('–ê–º–ø–ª—É–∞: –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è', '–ê–º–ø–ª—É–∞'))
			}
		}

		if (userSettings.get('responseVoiceSpeed') === 'fast') bottomLine.push(Markup.button.callback('–°–∫–æ—Ä–æ—Å—Ç—å: –ë—ã—Å—Ç—Ä–∞—è', '–°–∫–æ—Ä–æ—Å—Ç—å'))
		if (userSettings.get('responseVoiceSpeed') === 'normal') bottomLine.push(Markup.button.callback('–°–∫–æ—Ä–æ—Å—Ç—å: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è', '–°–∫–æ—Ä–æ—Å—Ç—å'))
		if (userSettings.get('responseVoiceSpeed') === 'slow') bottomLine.push(Markup.button.callback('–°–∫–æ—Ä–æ—Å—Ç—å: –ú–µ–¥–ª–µ–Ω–Ω–∞—è', '–°–∫–æ—Ä–æ—Å—Ç—å'))
		return Markup.inlineKeyboard([topLine, middleLine, bottomLine, this.bottomNavigation])
	}

	// Response voice language menu keyboard
	voiceSettingsLanguage() {
		const topLineButton = []
		const bottomLineButton = []
		const languages = yandexSpeech.voiceConfig
		const userSettings = telegramBot.userSettings
		for (let languageKey in languages) {
			if (languageKey !== 'allVoices') {
				if (languageKey === 'ru' || languageKey === 'en') {
					if (userSettings.get('responseVoiceLanguage') === languageKey) {
						topLineButton.push(Markup.button.callback(`‚úì ${languages[languageKey].flag} ${languages[languageKey].title}`, languageKey))
					} else {
						topLineButton.push(Markup.button.callback(`${languages[languageKey].flag} ${languages[languageKey].title}`, languageKey))
					}
				} else {
					if (userSettings.get('responseVoiceLanguage') === languageKey) {
						bottomLineButton.push(Markup.button.callback(`‚úì ${languages[languageKey].flag} ${languages[languageKey].title}`, languageKey))
					} else {
						bottomLineButton.push(Markup.button.callback(`${languages[languageKey].flag} ${languages[languageKey].title}`, languageKey))
					}
				}
			}
		}
		return Markup.inlineKeyboard([topLineButton, bottomLineButton, this.bottomNavigation])
	}

	voiceSettingsLanguageGender() {
		const languages = yandexSpeech.voiceConfig
		const userSettings = telegramBot.userSettings
		const responseVoiceLanguage = telegramBot.userSettings.get('responseVoiceLanguage')
		const gendersButtonTop = []
		const gendersButtonBottom = []
		for (let languageKey in languages) {
			const genders = languages[languageKey]
			if (languageKey === 'ru' && responseVoiceLanguage === 'ru') {
				for (let genderKey in genders) {
					if (genderKey === 'male') {
						if (userSettings.get('responseVoiceGender') === 'male') {
							gendersButtonTop.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonTop.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
					if (genderKey === 'female') {
						if (userSettings.get('responseVoiceGender') === 'female') {
							gendersButtonBottom.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonBottom.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
				}
			}
			if (languageKey === 'en' && responseVoiceLanguage === 'en') {
				for (let genderKey in genders) {
					if (genderKey === 'male') {
						if (userSettings.get('responseVoiceGender') === 'male') {
							gendersButtonTop.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonTop.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
					if (genderKey === 'female') {
						if (userSettings.get('responseVoiceGender') === 'female') {
							gendersButtonBottom.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonBottom.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
				}
			}
			if (languageKey === 'de' && responseVoiceLanguage === 'de') {
				for (let genderKey in genders) {
					if (genderKey === 'male') {
						if (userSettings.get('responseVoiceGender') === 'male') {
							gendersButtonTop.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonTop.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
					if (genderKey === 'female') {
						if (userSettings.get('responseVoiceGender') === 'female') {
							gendersButtonBottom.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonBottom.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
				}
			}
			if (languageKey === 'kk' && responseVoiceLanguage === 'kk') {
				for (let genderKey in genders) {
					if (genderKey === 'male') {
						if (userSettings.get('responseVoiceGender') === 'male') {
							gendersButtonTop.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonTop.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
					if (genderKey === 'female') {
						if (userSettings.get('responseVoiceGender') === 'female') {
							gendersButtonBottom.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonBottom.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
				}
			}
			if (languageKey === 'uz' && responseVoiceLanguage === 'uz') {
				for (let genderKey in genders) {
					if (genderKey === 'male') {
						if (userSettings.get('responseVoiceGender') === 'male') {
							gendersButtonTop.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonTop.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
					if (genderKey === 'female') {
						if (userSettings.get('responseVoiceGender') === 'female') {
							gendersButtonBottom.push(Markup.button.callback(`‚úì ${genders[genderKey].title}`, `${genderKey}`))
						} else {
							gendersButtonBottom.push(Markup.button.callback(`${genders[genderKey].title}`, `${genderKey}`))
						}
					}
				}
			}
		}
		return Markup.inlineKeyboard([gendersButtonTop, gendersButtonBottom, this.bottomNavigation])
	}

	voiceSettingsVoices() {
		const voices = yandexSpeech.voiceConfig
		const responseVoiceLanguage = telegramBot.userSettings.get('responseVoiceLanguage')
		const responseVoiceGender = telegramBot.userSettings.get('responseVoiceGender')
		const voiceButtons = []
		if (responseVoiceLanguage === 'ru') {
			if (responseVoiceGender === 'male') {
				const male = voices.ru.male.voices
				for (let maleKey in male) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === maleKey) {
						text = `‚úì ${male[maleKey].name}`
					} else {
						text = `${male[maleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${maleKey}`))
				}
			}
			if (responseVoiceGender === 'female') {
				const female = voices.ru.female.voices
				for (let femaleKey in female) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === femaleKey) {
						text = `‚úì ${female[femaleKey].name}`
					} else {
						text = `${female[femaleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${femaleKey}`))
				}
			}
		}
		if (responseVoiceLanguage === 'en') {
			if (responseVoiceGender === 'male') {
				const male = voices.en.male.voices
				for (let maleKey in male) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === maleKey) {
						text = `‚úì ${male[maleKey].name}`
					} else {
						text = `${male[maleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${maleKey}`))
				}
			}
			if (responseVoiceGender === 'female') {
				const female = voices.en.female.voices
				for (let femaleKey in female) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === femaleKey) {
						text = `‚úì ${female[femaleKey].name}`
					} else {
						text = `${female[femaleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${femaleKey}`))
				}
			}
		}
		if (responseVoiceLanguage === 'de') {
			if (responseVoiceGender === 'male') {
				const male = voices.de.male.voices
				for (let maleKey in male) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === maleKey) {
						text = `‚úì ${male[maleKey].name}`
					} else {
						text = `${male[maleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${maleKey}`))
				}
			}
			if (responseVoiceGender === 'female') {
				const female = voices.de.female.voices
				for (let femaleKey in female) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === femaleKey) {
						text = `‚úì ${female[femaleKey].name}`
					} else {
						text = `${female[femaleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${femaleKey}`))
				}
			}
		}
		if (responseVoiceLanguage === 'kk') {
			if (responseVoiceGender === 'male') {
				const male = voices.kk.male.voices
				for (let maleKey in male) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === maleKey) {
						text = `‚úì ${male[maleKey].name}`
					} else {
						text = `${male[maleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${maleKey}`))
				}
			}
			if (responseVoiceGender === 'female') {
				const female = voices.kk.female.voices
				for (let femaleKey in female) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === femaleKey) {
						text = `‚úì ${female[femaleKey].name}`
					} else {
						text = `${female[femaleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${femaleKey}`))
				}
			}
		}
		if (responseVoiceLanguage === 'uz') {
			if (responseVoiceGender === 'male') {
				const male = voices.uz.male.voices
				for (let maleKey in male) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === maleKey) {
						text = `‚úì ${male[maleKey].name}`
					} else {
						text = `${male[maleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${maleKey}`))
				}
			}
			if (responseVoiceGender === 'female') {
				const female = voices.uz.female.voices
				for (let femaleKey in female) {
					let text = ''
					if (telegramBot.userSettings.get('responseVoice') === femaleKey) {
						text = `‚úì ${female[femaleKey].name}`
					} else {
						text = `${female[femaleKey].name}`
					}
					voiceButtons.push(Markup.button.callback(text, `${femaleKey}`))
				}
			}
		}
		return Markup.inlineKeyboard([voiceButtons, this.bottomNavigation])
	}

	voiceSettingsRole(voiceName) {
		const topButton = []
		const centerButton = []
		const bottomButton = []
		const allVoices = yandexSpeech.voiceConfig.allVoices
		const userSettings = telegramBot.userSettings
		const roles = allVoices[voiceName].role
		for (let rolesKey in roles) {
			if (rolesKey === 'good') {
				if (userSettings.get('responseVoiceEmotion') === 'good') {
					if (userSettings.get('responseVoiceGender') === 'male') {
						topButton.push(Markup.button.callback(`‚úì –†–∞–¥–æ—Å—Ç–Ω—ã–π`, '–†–∞–¥–æ—Å—Ç–Ω—ã–π'))
					} else {
						topButton.push(Markup.button.callback(`‚úì –†–∞–¥–æ—Å—Ç–Ω–∞—è`, '–†–∞–¥–æ—Å—Ç–Ω—ã–π'))
					}
				} else {
					if (userSettings.get('responseVoiceGender') === 'male') {
						topButton.push(Markup.button.callback(`–†–∞–¥–æ—Å—Ç–Ω—ã–π`, '–†–∞–¥–æ—Å—Ç–Ω—ã–π'))
					} else {
						topButton.push(Markup.button.callback(`–†–∞–¥–æ—Å—Ç–Ω–∞—è`, '–†–∞–¥–æ—Å—Ç–Ω—ã–π'))
					}
				}
			}
			if (rolesKey === 'neutral') {
				if (userSettings.get('responseVoiceEmotion') === 'neutral') {
					if (userSettings.get('responseVoiceGender') === 'male') {
						centerButton.push(Markup.button.callback(`‚úì –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π`, '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))
					} else {
						centerButton.push(Markup.button.callback(`‚úì –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è`, '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))
					}
				} else {
					if (userSettings.get('responseVoiceGender') === 'male') {
						centerButton.push(Markup.button.callback(`–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π`, '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))
					} else {
						centerButton.push(Markup.button.callback(`–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è`, '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))
					}
				}
			}
			if (rolesKey === 'evil') {
				if (userSettings.get('responseVoiceEmotion') === 'evil') {
					if (userSettings.get('responseVoiceGender') === 'male') {
						bottomButton.push(Markup.button.callback(`‚úì –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π`, '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π'))
					} else {
						bottomButton.push(Markup.button.callback(`‚úì –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è`, '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π'))
					}
				} else {
					if (userSettings.get('responseVoiceGender') === 'male') {
						bottomButton.push(Markup.button.callback(`–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π`, '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π'))
					} else {
						bottomButton.push(Markup.button.callback(`–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è`, '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π'))
					}
				}
			}
		}
		return Markup.inlineKeyboard([topButton, centerButton, bottomButton, this.bottomNavigation])
	}

	voiceSettingsSpeed() {
		const topButton = []
		const centerButton = []
		const bottomButton = []
		const userSettings = telegramBot.userSettings
		if (userSettings.get('responseVoiceSpeed') === 'fast') {
			topButton.push(Markup.button.callback(`‚úì –ë—ã—Å—Ç—Ä–∞—è`, '–ë—ã—Å—Ç—Ä–∞—è'))
		} else {
			topButton.push(Markup.button.callback(`–ë—ã—Å—Ç—Ä–∞—è`, '–ë—ã—Å—Ç—Ä–∞—è'))
		}
		if (userSettings.get('responseVoiceSpeed') === 'normal') {
			centerButton.push(Markup.button.callback(`‚úì –ù–æ—Ä–º–∞–ª—å–Ω–∞—è`, '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è'))
		} else {
			centerButton.push(Markup.button.callback(`–ù–æ—Ä–º–∞–ª—å–Ω–∞—è`, '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è'))
		}
		if (userSettings.get('responseVoiceSpeed') === 'slow') {
			bottomButton.push(Markup.button.callback(`‚úì –ú–µ–¥–ª–µ–Ω–Ω–∞—è`, '–ú–µ–¥–ª–µ–Ω–Ω–∞—è'))
		} else {
			bottomButton.push(Markup.button.callback(`–ú–µ–¥–ª–µ–Ω–Ω–∞—è`, '–ú–µ–¥–ª–µ–Ω–Ω–∞—è'))
		}
		return Markup.inlineKeyboard([topButton, centerButton, bottomButton, this.bottomNavigation])
	}
}

export const settingsKeyboard = new SettingsKeyboard()